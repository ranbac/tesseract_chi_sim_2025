/*
 * Plugin Name: ChatGPT STT (Speech-to-Text)
 * Description: Chuy·ªÉn gi·ªçng n√≥i th√†nh vƒÉn b·∫£n b·∫±ng API Whisper c·ªßa OpenAI.
 * Version: 1.1
 * Author: Strong Anchor Tech
 * Author URI: https://stronganchortech.com
 */

// ====== T·∫°o trang c·∫•u h√¨nh API Key trong admin ======
function chatgpt_stt_admin_page() {
    add_submenu_page(
        'tools.php',
        'ChatGPT STT Settings',
        'ChatGPT STT',
        'manage_options',
        'chatgpt-stt-settings',
        'chatgpt_stt_settings_page'
    );
}
add_action('admin_menu', 'chatgpt_stt_admin_page');

function chatgpt_stt_settings_page() {
    ?>
    <div class="wrap">
        <h2>ChatGPT STT - C√†i ƒë·∫∑t</h2>
        <form method="post" action="options.php">
            <?php
                settings_fields('chatgpt_stt_settings_group');
                do_settings_sections('chatgpt_stt_settings_group');
            ?>
            <table class="form-table">
                <tr valign="top">
                    <th scope="row">OpenAI API Key</th>
                    <td><input type="text" name="chatgpt_api_key" value="<?php echo esc_attr(get_option('chatgpt_api_key')); ?>" size="60" /></td>
                </tr>
            </table>
            <?php submit_button(); ?>
        </form>
    </div>
    <?php
}

function chatgpt_stt_register_settings() {
    register_setting('chatgpt_stt_settings_group', 'chatgpt_api_key');
}
add_action('admin_init', 'chatgpt_stt_register_settings');

// ====== G·ªçi API Whisper ƒë·ªÉ chuy·ªÉn √¢m thanh th√†nh vƒÉn b·∫£n ======
function transcribe_audio_to_text($audio_path, $user_prompt) {
    $api_key = defined('CHATGPT_API_KEY') ? CHATGPT_API_KEY : get_option('chatgpt_api_key');
    if (!$api_key) return '‚ö†Ô∏è Thi·∫øu API key.';

    $url = 'https://api.openai.com/v1/audio/transcriptions';

    $postfields = [
        'file' => new CURLFile($audio_path),
        'model' => 'whisper-1',
        'response_format' => 'text',
        'prompt' => $user_prompt
    ];

    $headers = ['Authorization: Bearer ' . $api_key];

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $postfields);

    $response = curl_exec($ch);
    $error = curl_error($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    if ($http_code !== 200) {
        return '‚ùå L·ªói API: ' . ($response ?: $error);
    }

    return $response ?: '‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi.';
}

// ====== Hi·ªÉn th·ªã form upload + x·ª≠ l√Ω ======
function audio_to_text_shortcode_callback() {
    $output = '<form method="post" enctype="multipart/form-data">';
    $output .= '<label for="audio_file">üéôÔ∏è T·∫£i l√™n file √¢m thanh:</label><br>';
    $output .= '<input type="file" name="audio_file" accept="audio/*" required><br><br>';
    $output .= '<input type="submit" value="Chuy·ªÉn th√†nh vƒÉn b·∫£n">';
    $output .= '</form>';

    if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_FILES['audio_file'])) {
        $allowed_types = ['audio/mpeg', 'audio/wav', 'audio/x-wav', 'audio/mp4', 'audio/webm'];
        $file_type = $_FILES['audio_file']['type'];

        if ($_FILES['audio_file']['size'] > 2 * 1024 * 1024) {
            $output .= '<div style="color:red;">‚ùå File v∆∞·ª£t qu√° gi·ªõi h·∫°n 2MB.</div>';
        } elseif (!in_array($file_type, $allowed_types)) {
            $output .= '<div style="color:red;">‚ùå ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Ch·ªâ ch·∫•p nh·∫≠n: MP3, WAV, MP4, WEBM.</div>';
        } else {
            $upload = wp_handle_upload($_FILES['audio_file'], ['test_form' => false]);
            if (isset($upload['error'])) {
                $output .= '<div style="color:red;">L·ªói t·∫£i l√™n: ' . esc_html($upload['error']) . '</div>';
            } else {
                $audio_file_path = $upload['file'];
                $prompt = isset($_POST['user_prompt']) ? sanitize_text_field($_POST['user_prompt']) : '';
                $text = transcribe_audio_to_text($audio_file_path, $prompt);

                $output .= '<h3>üßæ K·∫øt qu·∫£:</h3><div style="background:#f4f4f4;padding:10px;border:1px solid #ccc;white-space:pre-wrap;">' . esc_html($text) . '</div>';

                // ‚úÖ Xo√° file t·∫°m
                if (file_exists($audio_file_path)) {
                    unlink($audio_file_path);
                }
            }
        }
    }

    return $output;
}
add_shortcode('audio_to_text_form', 'audio_to_text_shortcode_callback');


function chatgpt_stt_live_voice_to_text_shortcode() {
    ob_start();
    ?>
    <div>
        <button id="start-recording">üé§ B·∫Øt ƒë·∫ßu ghi</button>
        <button id="stop-recording" disabled>‚èπÔ∏è D·ª´ng ghi</button>
        <p id="recording-status"></p>
        <audio id="audio-playback" controls style="display:none; margin-top:10px;"></audio>
        <div id="transcription-result" style="margin-top:15px;"></div>
    </div>

    <script>
    let mediaRecorder;
    let audioChunks = [];

    document.getElementById('start-recording').addEventListener('click', async () => {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        mediaRecorder = new MediaRecorder(stream);
        audioChunks = [];

        mediaRecorder.ondataavailable = e => {
            audioChunks.push(e.data);
        };

        mediaRecorder.onstop = () => {
            const blob = new Blob(audioChunks, { type: 'audio/webm' });
            const audioURL = URL.createObjectURL(blob);

            const audio = document.getElementById('audio-playback');
            audio.src = audioURL;
            audio.style.display = 'block';

            document.getElementById('recording-status').innerText = 'üîÑ ƒêang x·ª≠ l√Ω...';

            const formData = new FormData();
            formData.append('action', 'chatgpt_stt_upload_and_transcribe');
            formData.append('audio_data', blob, 'recording.webm');

            fetch('<?php echo admin_url('admin-ajax.php'); ?>', {
                method: 'POST',
                body: formData
            })
            .then(res => res.text())
            .then(text => {
                document.getElementById('recording-status').innerText = '‚úÖ Ho√†n t·∫•t';
                document.getElementById('transcription-result').innerHTML =
                    '<h3>üßæ K·∫øt qu·∫£:</h3><div style="background:#f9f9f9;padding:10px;border:1px solid #ccc;white-space:pre-wrap;">' +
                    text + '</div>';
            })
            .catch(err => {
                document.getElementById('recording-status').innerText = '‚ùå L·ªói khi g·ª≠i file.';
                console.error(err);
            });
        };

        mediaRecorder.start();
        document.getElementById('recording-status').innerText = 'üéôÔ∏è ƒêang ghi...';
        document.getElementById('start-recording').disabled = true;
        document.getElementById('stop-recording').disabled = false;
    });
// ‚è±Ô∏è T·ª± ƒë·ªông d·ª´ng sau 30 gi√¢y
setTimeout(() => {
    if (mediaRecorder.state === 'recording') {
        mediaRecorder.stop();
        document.getElementById('start-recording').disabled = false;
        document.getElementById('stop-recording').disabled = true;
        document.getElementById('recording-status').innerText = '‚è±Ô∏è H·∫øt th·ªùi gian ghi (30 gi√¢y).';
    }
}, 30000); // 30 gi√¢y = 30,000 ms
    document.getElementById('stop-recording').addEventListener('click', () => {
        mediaRecorder.stop();
        document.getElementById('start-recording').disabled = false;
        document.getElementById('stop-recording').disabled = true;
    });
    </script>
    <?php
    return ob_get_clean();
}
add_shortcode('voice_to_text_live', 'chatgpt_stt_live_voice_to_text_shortcode');

add_action('wp_ajax_chatgpt_stt_upload_and_transcribe', 'chatgpt_stt_ajax_upload');
add_action('wp_ajax_nopriv_chatgpt_stt_upload_and_transcribe', 'chatgpt_stt_ajax_upload');

function chatgpt_stt_ajax_upload() {
    if (!isset($_FILES['audio_data'])) {
        wp_send_json_error('‚ùå Kh√¥ng c√≥ file √¢m thanh.');
        return;
    }

    $file = $_FILES['audio_data'];
    $allowed_types = ['audio/webm', 'audio/mpeg', 'audio/wav'];

    if (!in_array($file['type'], $allowed_types)) {
        wp_send_json_error('‚ùå ƒê·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá.');
        return;
    }

    $upload = wp_handle_upload($file, ['test_form' => false]);

    if (isset($upload['error'])) {
        wp_send_json_error('‚ùå Upload th·∫•t b·∫°i: ' . $upload['error']);
        return;
    }

    $file_path = $upload['file'];
    $result = transcribe_audio_to_text($file_path, '');

    // Xo√° file t·∫°m
    if (file_exists($file_path)) {
        unlink($file_path);
    }

    echo esc_html($result);
    wp_die();
}
